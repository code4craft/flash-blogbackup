package com.flash.blogbackup.main;import java.awt.BorderLayout;import java.awt.Rectangle;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.WindowEvent;import java.awt.event.WindowListener;import java.util.HashMap;import java.util.Map;import java.util.Map.Entry;import javax.swing.ButtonGroup;import javax.swing.ImageIcon;import javax.swing.JButton;import javax.swing.JFrame;import javax.swing.JLabel;import javax.swing.JPanel;import javax.swing.JRadioButton;import com.flash.blogbackup.model.Blog;import com.flash.blogbackup.model.BlogType;/** * @author cairne huangyihua@diandian.com * @date Oct 4, 2011 */public class StartGuideFrame extends JFrame {    private SelectTypePanel typePanel = null;    public static StartGuideFrame instance = new StartGuideFrame();    private volatile Blog blog;    public Blog getBlog() {        return blog;    }    public SelectTypePanel getTypePanel() {        if (typePanel == null) {            typePanel = new SelectTypePanel();        }        return typePanel;    }    private void initFrame() {        this.setBounds(new Rectangle(550, 150, 500, 300));        this.setTitle("备份向导");        this.setResizable(false);        this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);        this.reInit();    }    public void reInit() {        typePanel = new SelectTypePanel();        this.setContentPane(typePanel);        blog = null;    }    private void initListener() {        this.addWindowListener(new WindowListener() {            public void windowOpened(WindowEvent paramWindowEvent) {            }            public void windowIconified(WindowEvent paramWindowEvent) {            }            public void windowDeiconified(WindowEvent paramWindowEvent) {            }            public void windowDeactivated(WindowEvent paramWindowEvent) {            }            public void windowClosing(WindowEvent paramWindowEvent) {            }            public void windowClosed(WindowEvent paramWindowEvent) {                MainFrame.instance.setEnabled(true);            }            public void windowActivated(WindowEvent paramWindowEvent) {            }        });    }    private void init() {        initFrame();        initListener();    }    private StartGuideFrame() {        init();    }    /**     * @deprecated     * @author cairne huangyihua@diandian.com     * @date Oct 6, 2011     */    private static class SelectTypePanelWithRichButton extends JPanel {        public static SelectTypePanelWithRichButton instance = new SelectTypePanelWithRichButton();        private JButton sinaButton = null;        private JButton neteaseButton = null;        private JButton baiduButton = null;        private JPanel buttonPanel = null;        public SelectTypePanelWithRichButton() {            init();        }        private JPanel getButtonPanel() {            if (buttonPanel == null) {                buttonPanel = new JPanel();                //buttonPanel.setLayout(new CardLayout());                buttonPanel.add(getSinaButton());                buttonPanel.add(getNeteaseButton());                buttonPanel.add(getBaiduButton());            }            return buttonPanel;        }        private void init() {            this.setLayout(new BorderLayout());            JLabel mesLabel = new JLabel();            mesLabel.setText("请选择备份博客类型：");            mesLabel.setFont(getFont().deriveFont(15.0f));            this.add(mesLabel, BorderLayout.NORTH);            this.add(getButtonPanel(), BorderLayout.CENTER);        }        private JButton getNeteaseButton() {            if (neteaseButton == null) {                neteaseButton = new JButton();                neteaseButton.setBorderPainted(false);                neteaseButton.setIcon(new ImageIcon("resources/163_blog_off.png"));                neteaseButton.setRolloverIcon(new ImageIcon("resources/163_blog_focus.png"));                neteaseButton.addActionListener(new ActionListener() {                    public void actionPerformed(ActionEvent paramActionEvent) {                        StartGuideFrame startGuideFrame = StartGuideFrame.instance;                        startGuideFrame.blog = new Blog(BlogType.netease);                        startGuideFrame.setContentPane((startGuideFrame.new BlogInfoPanel())                                .reInit());                        startGuideFrame.setVisible(true);                    }                });            }            return neteaseButton;        }        private JButton getSinaButton() {            if (sinaButton == null) {                sinaButton = new JButton();                sinaButton.setBorderPainted(false);                sinaButton.setIcon(new ImageIcon("resources/sina_blog_off.png"));                sinaButton.setRolloverIcon(new ImageIcon("resources/sina_blog_focus.png"));                sinaButton.addActionListener(new ActionListener() {                    public void actionPerformed(ActionEvent paramActionEvent) {                        StartGuideFrame startGuideFrame = StartGuideFrame.instance;                        startGuideFrame.blog = new Blog(BlogType.sina);                        startGuideFrame.setContentPane((startGuideFrame.new BlogInfoPanel())                                .reInit());                        startGuideFrame.setVisible(true);                    }                });            }            return sinaButton;        }        private JButton getBaiduButton() {            if (baiduButton == null) {                baiduButton = new JButton();                baiduButton.setBorderPainted(false);                baiduButton.setIcon(new ImageIcon("resources/baidu_blog_off.png"));                baiduButton.setRolloverIcon(new ImageIcon("resources/baidu_blog_focus.png"));                baiduButton.addActionListener(new ActionListener() {                    public void actionPerformed(ActionEvent paramActionEvent) {                        StartGuideFrame startGuideFrame = StartGuideFrame.instance;                        startGuideFrame.blog = new Blog(BlogType.baidu);                        startGuideFrame.setContentPane((startGuideFrame.new BlogInfoPanel())                                .reInit());                        startGuideFrame.setVisible(true);                    }                });            }            return baiduButton;        }    }    private class SelectTypePanel extends JPanel {        private ButtonGroup selectTypeButtons = null;        private JPanel selectTypeButtonsPanel = null;        private JPanel stepPanel = null;        private JButton nextStepButton = null;        private Map<BlogType, JRadioButton> buttonMap = new HashMap<BlogType, JRadioButton>();        private SelectTypePanel() {            init();        }        private void init() {            this.setLayout(new BorderLayout());            JLabel mesLabel = new JLabel();            mesLabel.setText("请选择备份博客类型：");            mesLabel.setFont(getFont().deriveFont(19.0f));            this.add(mesLabel, BorderLayout.NORTH);            this.add(getSelectTypeButtonsPanel(), BorderLayout.CENTER);            this.add(getStepPanel(), BorderLayout.SOUTH);        }        private JPanel getStepPanel() {            if (stepPanel == null) {                stepPanel = new JPanel();                stepPanel.setLayout(new BorderLayout());                stepPanel.add(getNextStepButton(), BorderLayout.EAST);            }            return stepPanel;        }        private JButton getNextStepButton() {            if (nextStepButton == null) {                nextStepButton = new JButton("下一步");                nextStepButton.setFont(getFont().deriveFont(15.0f));                nextStepButton.addActionListener(new ActionListener() {                    public void actionPerformed(ActionEvent paramActionEvent) {                        for (Entry<BlogType, JRadioButton> entry : buttonMap.entrySet()) {                            if (entry.getValue().isSelected()) {                                blog = new Blog(entry.getKey());                            }                        }                        BlogInfoPanel blogInfoPanel = new BlogInfoPanel();                        setContentPane(blogInfoPanel);                        blogInfoPanel.reInit();                    }                });            }            return nextStepButton;        }        private JPanel getSelectTypeButtonsPanel() {            if (selectTypeButtonsPanel == null) {                selectTypeButtonsPanel = new JPanel();                for (BlogType blogType : BlogType.values()) {                    JPanel singlePanel = new JPanel();                    singlePanel.add(getJRadioButton(blogType));                    JLabel image = new JLabel();                    image.setIcon(new ImageIcon(blogType.getImage()));                    singlePanel.add(image);                    selectTypeButtonsPanel.add(singlePanel);                }            }            return selectTypeButtonsPanel;        }        private ButtonGroup getSelectTypeButtons() {            if (selectTypeButtons == null) {                selectTypeButtons = new ButtonGroup();            }            return selectTypeButtons;        }        private JRadioButton getJRadioButton(BlogType blogType) {            JRadioButton button = new JRadioButton();            button.setFont(getFont().deriveFont(18.0f));            buttonMap.put(blogType, button);            getSelectTypeButtons().add(button);            return button;        }    }    private class BlogInfoPanel extends JPanel {        private JLabel messageLabel = null;        public void init() {            getMessageLabel().setLayout(new BorderLayout());            this.add(getMessageLabel(), BorderLayout.NORTH);        }        private JLabel getMessageLabel() {            if (messageLabel == null) {                messageLabel = new JLabel();            }            return messageLabel;        }        public BlogInfoPanel reInit() {            getMessageLabel().setText(getBlog().getType().toString());            return this;        }        public BlogInfoPanel() {            init();        }    }}